// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String   // bcrypt hashed
  firstName String?
  lastName  String?
  avatar    String?  // Pokemon avatar URL
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  favorites     Favorite[]
  teams         Team[]
  refreshTokens RefreshToken[]
  
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Pokemon {
  id          Int      @id
  name        String   @unique
  imageUrl    String
  types       String   // JSON string untuk types
  abilities   String?  // JSON string untuk abilities
  stats       String?  // JSON string untuk stats
  height      Int?
  weight      Int?
  species     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  favorites   Favorite[]
  teamMembers TeamMember[]
  
  @@map("pokemon")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  pokemonId Int
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, pokemonId])
  @@map("favorites")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  isPublic    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  members TeamMember[]
  
  @@map("teams")
}

model TeamMember {
  id        Int @id @default(autoincrement())
  teamId    Int
  pokemonId Int
  position  Int // 1-6 for team slots
  nickname  String? // Custom nickname for pokemon in team
  
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, pokemonId]) // No duplicates in same team
  @@unique([teamId, position])  // One pokemon per position
  @@map("team_members")
}